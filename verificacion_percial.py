# -*- coding: utf-8 -*-
"""verificacion percvial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I2tdV8oS5dvajAPCBANiwLQ2iHq32mlF
"""

carrito = []  # Se crea una lista vacía llamada 'carrito' para almacenar los productos que el usuario agregue

while True:  # Bucle infinito para mostrar continuamente el menú hasta que el usuario decida salir
  print("menu carrito de compras")  # Muestra el título del menú
  print("1. Agregar producto")       # Opción 1: agregar producto al carrito
  print("2. eliminar producto")      # Opción 2: eliminar producto del carrito
  print("3. ver carrito")            # Opción 3: mostrar todos los productos del carrito
  print("4. salir")                  # Opción 4: salir del programa

  opcion = input("Elija una opcion (1-4)")  # Solicita al usuario que ingrese una opción del menú
  if opcion == "1":  # Si el usuario elige la opción 1
    producto = input("producto a agregar:")  # Pide el nombre del producto a agregar
    print(f"{producto} ha sido agregado al carrito")  # Muestra mensaje de confirmación
  elif opcion == "2":  # Si el usuario elige la opción 2
    producto = input("eliminar un producto:")  # Pide el nombre del producto a eliminar
    if producto in carrito:  # Verifica si el producto está en el carrito
      carrito.remove(producto)  # Lo elimina de la lista
      print(f"{producto} eliminado")  # Mensaje de confirmación
    else:
      print(f"{producto} no esta")  # Mensaje si el producto no se encuentra en el carrito
  elif opcion == "3":  # Si el usuario elige la opción 3
    if carrito:  # Verifica si hay productos en el carrito
      print("carrito de compras")  # Muestra encabezado del carrito
      for i , item in enumerate(carrito, 1):  # Recorre la lista de productos (enumerando desde 1)
        pass  # Aquí debería ir la lógica para mostrar cada producto, pero está vacío
  elif opcion == "4":  # Si el usuario elige la opción 4
        print("Saliendo del programa...")  # Mensaje de salida
        break  # Sale del bucle infinito y termina el programa

"""CORRECCION 1

"""

carrito = []  # Se crea una lista vacía llamada 'carrito' para almacenar los productos que agregue el usuario

while True:  # Bucle infinito para mostrar continuamente el menú hasta que el usuario decida salir
    print("menu carrito de compras")  # Muestra el título del menú
    print("1. Agregar producto")       # Opción 1: permite agregar un producto al carrito
    print("2. eliminar producto")      # Opción 2: permite eliminar un producto del carrito
    print("3. ver carrito")            # Opción 3: muestra todos los productos en el carrito
    print("4. salir")                  # Opción 4: salir del programa

    opcion = input("Elija una opcion (1-4): ")  # Solicita al usuario ingresar una opción
    if opcion == "1":  # Si elige la opción 1
        producto = input("producto a agregar: ")  # Solicita el nombre del producto a agregar
        carrito.append(producto)  # Agrega el producto a la lista 'carrito'
        print(f"{producto} ha sido agregado al carrito")  # Confirma al usuario que el producto se agregó
    elif opcion == "2":  # Si elige la opción 2
        producto = input("eliminar un producto: ")  # Solicita el nombre del producto a eliminar
        if producto in carrito:  # Verifica si el producto existe en el carrito
            carrito.remove(producto)  # Elimina el producto de la lista
            print(f"{producto} eliminado")  # Confirma que el producto fue eliminado
        else:
            print(f"{producto} no esta en el carrito")  # Indica que el producto no se encontró en el carrito
    elif opcion == "3":  # Si elige la opción 3
        if carrito:  # Verifica si el carrito tiene productos
            print("carrito de compras:")  # Muestra encabezado del carrito
            for i, item in enumerate(carrito, 1):  # Recorre la lista de productos enumerándolos desde 1
                print(f"{i}. {item}")  # Muestra cada producto con su número correspondiente
        else:
            print("El carrito está vacío")  # Mensaje si no hay productos en el carrito
    elif opcion == "4":  # Si elige la opción 4
        print("Saliendo del programa...")  # Muestra mensaje de salida
        break  # Sale del bucle y termina el programa
    else:  # Si ingresa una opción que no sea 1-4
        print("Opción inválida, intente de nuevo")  # Mensaje de error y vuelve a mostrar el menú

"""PUNTO 2"""

#roles permitidos
roles = ["admin","editor","visitante"]  # Lista de roles válidos que un usuario puede tener

usuarios_registrados = []  # Lista vacía donde se guardarán los usuarios registrados como tuplas (nombre, rol)

print("Registro de usuarios")  # Mensaje inicial que indica el inicio del registro de usuarios

while True:  # Bucle infinito para permitir registrar múltiples usuarios hasta que se decida detener
    nombre = input("Nombre: ").strip()  # Solicita el nombre del usuario y elimina espacios al inicio y final
    if nombre == "":  # Si el usuario no ingresa ningún nombre
        break  # Sale del bucle, terminando el registro
    rol = input("Rol (admin,editor,visitante): ")  # Solicita al usuario ingresar un rol
    if rol in roles:  # Verifica si el rol ingresado está dentro de la lista de roles permitidos
        usuarios_registrados.append((nombre,rol))  # Agrega una tupla (nombre, rol) a la lista de usuarios registrados
        print(f"Usuario {nombre} registrado con rol {rol}")  # Confirma que el usuario fue registrado correctamente
    else:  # Si el rol no es válido
        print("Rol invalido")  # Muestra un mensaje de error indicando que el rol ingresado no es permitido

print("\nUsuarios registrados:")  # Mensaje que indica que a continuación se listarán los usuarios registrados
for u in usuarios_registrados:  # Recorre la lista de usuarios registrados
    print(u)  # Imprime cada usuario como tupla (nombre, rol)

"""CORRECCION 2"""

# Roles permitidos
roles = ["admin", "editor", "visitante"]  # Lista de roles válidos que se pueden asignar a un usuario

usuarios_registrados = []  # Lista vacía donde se guardarán los usuarios registrados como tuplas (nombre, rol)

print("Registro de usuarios")  # Mensaje inicial indicando que comienza el registro de usuarios

while True:  # Bucle infinito para permitir registrar varios usuarios hasta que se decida salir
    nombre = input("Nombre: ").strip()  # Solicita el nombre del usuario y elimina espacios al inicio y final
    if nombre == "":  # Si no se ingresa ningún nombre
        break  # Sale del bucle, terminando el registro de usuarios
    rol = input("Rol (admin, editor, visitante): ").strip().lower()
    # Solicita el rol del usuario, elimina espacios y lo convierte a minúsculas para validar correctamente
    if rol in roles:  # Verifica si el rol ingresado está en la lista de roles permitidos
        usuarios_registrados.append((nombre, rol))  # Agrega la tupla (nombre, rol) a la lista de usuarios registrados
        print(f"Usuario '{nombre}' registrado con rol '{rol}'")  # Confirma el registro exitoso
    else:  # Si el rol no es válido
        print("Rol inválido, intente de nuevo")  # Muestra mensaje de error y permite reingresar el rol

print("\nUsuarios registrados:")  # Mensaje que indica que se listarán los usuarios registrados
if usuarios_registrados:  # Verifica si hay usuarios registrados
    for u in usuarios_registrados:  # Recorre la lista de usuarios
        print(f"Nombre: {u[0]}, Rol: {u[1]}")  # Imprime cada usuario de manera legible

"""PUNTO3"""

contactos = {
    "camilo":"312 308 9471",
    "jeferson":"302 422 7417",
    "gustavo":"3122333695"
}
# Diccionario llamado 'contactos' que almacena nombres como claves y números de teléfono como valores

buscar_contacto = input("Escriba el contacto a buscar").lower()
# Solicita al usuario escribir el nombre del contacto a buscar y lo convierte a minúsculas

if buscar_contacto in contactos:
    # Verifica si el nombre ingresado está en el diccionario 'contactos'
    print(f"El contacto a buscar es {buscar_contacto} su numero telefonico es {contactos[buscar_contacto]}")
    # Muestra el nombre y número del contacto encontrado
else:
    print(f"No existe el contacto {buscar_contacto}")
    # Muestra un mensaje si el contacto no se encuentra en la lista

contactos["nombre"] = input("ingrese el nombre")  # Solicita un nuevo nombre y lo agrega al diccionario con clave "nombre"
contactos["telefono"] = int(input("ingrese el numero"))
# Solicita un número de teléfono, lo convierte a entero y lo agrega al diccionario con clave "telefono"

print(contactos.get)
# Muestra la referencia al método 'get' del diccionario (no imprime el contenido, solo la función)

"""correccion3"""

contactos = {
    "Camilo": "312 308 9471",
    "Jeferson": "302 422 7417",
    "Gustavo": "3122333695"
}
# Diccionario 'contactos' que almacena nombres como claves y números de teléfono como valores

buscar_contacto = input("Escriba el contacto a buscar: ").capitalize()
# Solicita al usuario el nombre del contacto a buscar y convierte la primera letra en mayúscula para coincidir con las claves

if buscar_contacto in contactos:
    # Verifica si el contacto ingresado existe en el diccionario
    print(f"El contacto a buscar es {buscar_contacto}, su número telefónico es {contactos[buscar_contacto]}")
    # Muestra el nombre y número del contacto encontrado
else:
    print(f"No existe el contacto {buscar_contacto}")
    # Mensaje si el contacto no se encuentra

# Agregar nuevo contacto
nombre = input("Ingrese el nombre del nuevo contacto: ").capitalize()
# Solicita el nombre del nuevo contacto y lo formatea con la primera letra en mayúscula
telefono = input("Ingrese el número: ")
# Solicita el número de teléfono del nuevo contacto
contactos[nombre] = telefono
# Agrega el nuevo contacto al diccionario con el nombre como clave y el número como valor

print("\nLista de contactos actualizada:")
# Muestra un mensaje indicando que se listarán todos los contactos
for nombre, telefono in contactos.items():
    # Recorre el diccionario 'contactos' obteniendo nombre y teléfono de cada entrada
    print(f"{nombre}: {telefono}")
    # Imprime cada contacto en formato legible: Nombre: Teléfono

"""PUNTO4"""

colores = {"rojo":0,
           "azul":0,
           "verde":0 }
# Diccionario 'colores' donde cada clave es un color y el valor inicial es 0, para contar votos

print("vota tu color favorito")
# Mensaje inicial invitando al usuario a votar

while True:  # Bucle infinito para permitir múltiples votos hasta que se cumpla una condición de salida
    voto = input("voto").strip().lower()
    # Solicita el voto del usuario, elimina espacios al inicio y final y convierte a minúsculas
    if voto == "salir" or voto == "":
        # Condición para salir del bucle: si el usuario escribe "salir" o deja vacío el input
        if voto in colores:  # Esta línea intenta contar el voto, pero nunca se cumple porque 'voto' es "salir" o "" aquí
            colores[voto] += 1
            print("voto contado para", voto)
    else:
        print("opcion invalida")
        # Si el usuario escribe cualquier otra cosa, muestra que la opción es inválida

print("\nResultados")
# Muestra un mensaje indicando que se mostrarán los resultados finales

for color, votos in colores.items():
    # Recorre el diccionario 'colores' obteniendo cada color y la cantidad de votos
    print(color, "=", votos)
    # Imprime el color y la cantidad de votos

"""CORRECCION4"""

colores = {
    "rojo": 0,
    "azul": 0,
    "verde": 0
}
# Diccionario 'colores' donde cada clave es un color y el valor inicial es 0, para contar los votos

print("Vota tu color favorito (escribe 'salir' para terminar)")
# Mensaje inicial indicando al usuario que puede votar por su color favorito y cómo terminar

while True:  # Bucle infinito para permitir múltiples votos hasta que se cumpla la condición de salida
    voto = input("Voto: ").strip().lower()
    # Solicita el voto del usuario, elimina espacios al inicio y final, y convierte a minúsculas

    if voto == "salir" or voto == "":
        break
        # Si el usuario escribe "salir" o deja el input vacío, se termina el bucle
    elif voto in colores:
        colores[voto] += 1
        # Si el voto coincide con un color válido, se incrementa el contador correspondiente
        print("Voto contado para", voto)
        # Mensaje de confirmación de que el voto fue registrado
    else:
        print("Opción inválida")
        # Mensaje si el voto no corresponde a ninguno de los colores disponibles

print("\nResultados:")
# Mensaje indicando que se mostrarán los resultados finales

for color, votos in colores.items():
    # Recorre el diccionario 'colores', obteniendo cada color y su número de votos
    print(color, "=", votos)
    # Imprime el color y la cantidad de votos acumulados